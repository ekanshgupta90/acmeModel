//        Set<? extends IAcmeFamily> families = javaModel.getFamilies();
//
//        for(IAcmeFamily f: families) {
//
//            System.out.print("Hi");
//            System.out.println(f.toString());
//        }


//        IAcmeFamily family = javaModel.getFamily("ROSFam.acme");
//        Set<? extends IAcmeComponentType> componentTypes = family.getComponentTypes();
//
//        for(IAcmeComponentType componentType: componentTypes){
//            System.out.println(componentType.toString());
//
//        }


//        try {
//            javaModel.getCommandFactory().systemCreateCommand("Turtlebot",dec,ins).execute();
//        } catch (AcmeException e) {
//            e.printStackTrace();
//        }


//        Set<? extends IAcmeElementTypeRef<IAcmeSystemType> > declaredTypes =  system.getDeclaredTypes();
//
////        for( IAcmeElementTypeRef<IAcmeSystemType> systemTypeIAcmeElementTypeRef : declaredTypes) {
////
////            Set<? extends IAcmeElementInstance<>systemTypeIAcmeElementTypeRef.getElementType()
////        }



        /*

                Set<? extends IAcmeProperty> properties = component.getProperties();

            for(IAcmeProperty property: properties) {
                System.out.println(property.getName());
            }




        AcmePort port = null;
        try {
            port = component.createPort("Publisher1");
        } catch (AcmeIllegalNameException e) {
            e.printStackTrace();
        }


        IAcmeCommandFactory commandFactory = system.getCommandFactory();


        AcmeConnector connector = new AcmeConnector(resource,model1,"topic1");

        IAcmeCommand cmd = component.getCommandFactory().propertyValueSetCommand (component.createProperty ("prop"), new UMIntValue(7));
        try {
            cmd.execute();
        } catch (AcmeException e) {
            e.printStackTrace();
        }
*/

//        String string = "addd";
//
//
//        OutputStream stream = new ByteArrayOutputStream();
//        try {
//            stream.write(string.getBytes(Charset.forName("UTF-8")));
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//
//        ArmaniExportVisitor visitor = new ArmaniExportVisitor(stream);
//        try {
//            javaModel.visit (visitor, "ss");
//        } catch (AcmeVisitorException e) {
//            e.printStackTrace();
//        }


        /*


        Set<? extends IAcmeComponent> components = system.getComponents();


        for(IAcmeComponent component: components) {

            System.out.print("Hi");

            Set<?extends IAcmeProperty> properties = component.getProperties();

            for(IAcmeProperty property:properties) {
                System.out.println(property.getName());
                System.out.println(property.getValue());
            }
        }

        for(IAcmeComponent component: components) {
            IAcmeCommand cmd = component.getCommandFactory().propertyValueSetCommand(component.getProperty("name"), new UMStringValue("tes1111t"));
            try {
                cmd.execute();
            } catch (AcmeException e) {
                e.printStackTrace();
            }
        }

                AcmeProperty property = new AcmeProperty(resource,(AcmeModel) javaModel,"name");
                IAcmePropertyValue value = new AcmeStringValue("ddd");
                property.setValue(value);
                component.addProperty(property);

        System.out.println(sys.getQualifiedName());

        EnumSet<AcmeCategory> cats = EnumSet.of(AcmeCategory.ACME_COMPONENT, AcmeCategory.ACME_CONNECTOR,AcmeCategory.ACME_ATTACHMENT);

        AcmeElementCollector collector = new AcmeElementCollector(cats);

        Set<IAcmeElement> elements = new HashSet<>();

        try {
            collector.visit(sys, elements);
        } catch (AcmeVisitorException e) {
            e.printStackTrace();
        }
*/